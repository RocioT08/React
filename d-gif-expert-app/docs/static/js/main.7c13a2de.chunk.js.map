{"version":3,"sources":["components/AddCategory.js","helpers/ApiUtils.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","newCategory","setNewCategory","onSubmit","event","preventDefault","trim","length","categories","type","onChange","e","target","value","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","props","img","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","useFetchGifs","categoriesTemplate","GifExpertApp","onClick","Math","random","ReactDOM","render","document","getElementById"],"mappings":"mMA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBADT,IADY,mBAElCC,EAFkC,KAErBC,EAFqB,KAYzC,OACE,sBAAMC,SATc,SAACC,GACrBA,EAAMC,iBACFJ,EAAYK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAiCO,OAC/CN,EAPyB,MAY3B,SACE,uBACEO,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOT,EAAeS,EAAEC,OAAOC,QACzCA,MAAOZ,O,uBCpBFa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAW,IAAD,EAC/B,MAAO,CACLC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QAXnB,kBAedM,GAfc,4CAAH,sDCaLO,EAXK,SAACC,GAAW,IACtBC,EAAQD,EAARC,IAER,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAIf,IAAKkB,IAAKH,EAAIL,QAC5B,4BAAIK,EAAIL,YCgBCS,EApBE,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDP,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACb,GAEtBW,EAAS,CAAEjB,KAAMM,EAAQS,SAAS,SAGnC,CAACtB,IAEGuB,EDZ2BI,CAAa3B,GAAjCa,EADmB,EACzBN,KAAce,EADW,EACXA,QAEtB,OACE,qCACE,6BAAKtB,IACJsB,GACC,mBAAGJ,UAAU,mCAAb,yBAGA,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAA4BO,IAAKP,GAAfA,EAAMC,aEZ9BiB,EAAqB,CAAC,UAyBbC,EAvBM,WAAO,IAAD,EACW5C,mBAAS2C,GADpB,mBAClBnC,EADkB,KACNT,EADM,KAOzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,wBAAQ8C,QATe,WACzB9C,EAAc,GAAD,mBAAKS,GAAL,oBAA6BsC,KAAKC,cAQ7C,qBAEA,6BACGvC,EAAWgB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,Y,MCjBzBiC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7c13a2de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const CONSTANT_EMPTY_VALUE = \"\";\n  const [newCategory, setNewCategory] = useState(CONSTANT_EMPTY_VALUE);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (newCategory.trim().length > 0) {\n      setCategories((categories) => [newCategory, ...categories]);\n      setNewCategory(CONSTANT_EMPTY_VALUE);\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <input\n        type=\"text\"\n        onChange={(e) => setNewCategory(e.target.value)}\n        value={newCategory}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((image) => {\n    return {\n      id: image.id,\n      title: image.title,\n      url: image.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nconst GifGridItem = (props) => {\n  const { img } = props;\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={img.url} alt={img.title} />\n      <p>{img.title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GiftGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Loading ...</p>\n      )}\n      {\n        <div className=\"card-grid\">\n          {images.map((image) => (\n            <GifGridItem key={image.id} img={image} />\n          ))}\n        </div>\n      }\n    </>\n  );\n};\n\nexport default GiftGrid;\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/ApiUtils\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) => {\n      // setTimeout(() => {\n      setState({ data: images, loading: false });\n      // }, 3000);\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GiftGrid from \"./components/GiftGrid\";\n\nconst categoriesTemplate = [\"action\"];\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(categoriesTemplate);\n\n  const addCategoryHandler = () => {\n    setCategories([...categories, `category_${Math.random()}`]);\n  };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <button onClick={addCategoryHandler}>Add New</button>\n\n      <ul>\n        {categories.map((category) => (\n          <GiftGrid key={category} category={category} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}